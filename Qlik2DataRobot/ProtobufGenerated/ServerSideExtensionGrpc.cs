// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerSideExtension.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Qlik.Sse {
  /// <summary>
  ///*
  /// The communication service provided between the Qlik engine and the plugin.
  /// </summary>
  public static partial class Connector
  {
    static readonly string __ServiceName = "qlik.sse.Connector";

    static readonly grpc::Marshaller<global::Qlik.Sse.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Qlik.Sse.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Qlik.Sse.Capabilities> __Marshaller_Capabilities = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Qlik.Sse.Capabilities.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Qlik.Sse.BundledRows> __Marshaller_BundledRows = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Qlik.Sse.BundledRows.Parser.ParseFrom);

    static readonly grpc::Method<global::Qlik.Sse.Empty, global::Qlik.Sse.Capabilities> __Method_GetCapabilities = new grpc::Method<global::Qlik.Sse.Empty, global::Qlik.Sse.Capabilities>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCapabilities",
        __Marshaller_Empty,
        __Marshaller_Capabilities);

    static readonly grpc::Method<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> __Method_ExecuteFunction = new grpc::Method<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ExecuteFunction",
        __Marshaller_BundledRows,
        __Marshaller_BundledRows);

    static readonly grpc::Method<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> __Method_EvaluateScript = new grpc::Method<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "EvaluateScript",
        __Marshaller_BundledRows,
        __Marshaller_BundledRows);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Qlik.Sse.ServerSideExtensionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Connector</summary>
    public abstract partial class ConnectorBase
    {
      /// <summary>
      //// A handshake call for the Qlik engine to retrieve the capability of the plugin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Qlik.Sse.Capabilities> GetCapabilities(global::Qlik.Sse.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// Requests a function to be executed as specified in the header.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ExecuteFunction(grpc::IAsyncStreamReader<global::Qlik.Sse.BundledRows> requestStream, grpc::IServerStreamWriter<global::Qlik.Sse.BundledRows> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// Requests a script to be evaluated as specified in the header.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task EvaluateScript(grpc::IAsyncStreamReader<global::Qlik.Sse.BundledRows> requestStream, grpc::IServerStreamWriter<global::Qlik.Sse.BundledRows> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Connector</summary>
    public partial class ConnectorClient : grpc::ClientBase<ConnectorClient>
    {
      /// <summary>Creates a new client for Connector</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConnectorClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Connector that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConnectorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConnectorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConnectorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// A handshake call for the Qlik engine to retrieve the capability of the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Qlik.Sse.Capabilities GetCapabilities(global::Qlik.Sse.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCapabilities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// A handshake call for the Qlik engine to retrieve the capability of the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Qlik.Sse.Capabilities GetCapabilities(global::Qlik.Sse.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCapabilities, null, options, request);
      }
      /// <summary>
      //// A handshake call for the Qlik engine to retrieve the capability of the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Qlik.Sse.Capabilities> GetCapabilitiesAsync(global::Qlik.Sse.Empty request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetCapabilitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// A handshake call for the Qlik engine to retrieve the capability of the plugin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Qlik.Sse.Capabilities> GetCapabilitiesAsync(global::Qlik.Sse.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCapabilities, null, options, request);
      }
      /// <summary>
      //// Requests a function to be executed as specified in the header.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> ExecuteFunction(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExecuteFunction(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Requests a function to be executed as specified in the header.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> ExecuteFunction(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ExecuteFunction, null, options);
      }
      /// <summary>
      //// Requests a script to be evaluated as specified in the header.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> EvaluateScript(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EvaluateScript(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Requests a script to be evaluated as specified in the header.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Qlik.Sse.BundledRows, global::Qlik.Sse.BundledRows> EvaluateScript(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_EvaluateScript, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConnectorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConnectorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConnectorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCapabilities, serviceImpl.GetCapabilities)
          .AddMethod(__Method_ExecuteFunction, serviceImpl.ExecuteFunction)
          .AddMethod(__Method_EvaluateScript, serviceImpl.EvaluateScript).Build();
    }

  }
}
#endregion
